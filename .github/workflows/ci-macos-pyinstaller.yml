name: macOS PyInstaller Build (universal)

on:
  push:
    branches: [ main, add/macos-ci-from-main ]
  pull_request:
    branches: [ main, add/macos-ci-from-main ]
  workflow_dispatch:

jobs:
  build-matrix:
    name: Build (${{ matrix.arch }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [ 'arm64', 'x86_64' ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build deps
        run: |
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            arch -x86_64 python3 -m pip install --upgrade pip
            arch -x86_64 python3 -m pip install pyinstaller reportlab music21 pillow
          else
            python3 -m pip install --upgrade pip
            python3 -m pip install pyinstaller reportlab music21 pillow
          fi

      - name: Build with PyInstaller
        run: |
          set -eux
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            echo "Building x86_64 with Rosetta (arch -x86_64)"
            arch -x86_64 pyinstaller --noconfirm --clean --onefile TEST.py --add-data assets/title.png:. --add-data assets/ico.png:. --add-data assets/fonts:assets/fonts
            mv dist/TEST dist/TEST-x86_64 || true
          else
            echo "Building arm64"
            pyinstaller --noconfirm --clean --onefile TEST.py --add-data assets/title.png:. --add-data assets/ico.png:. --add-data assets/fonts:assets/fonts
            mv dist/TEST dist/TEST-arm64 || true
          fi

      - name: Package arch artifact (tar.gz)
        run: |
          set -eux
          if [ -d dist ]; then
            tar -C dist -czf driveanalyzer-${{ matrix.arch }}.tar.gz .
            ls -la driveanalyzer-${{ matrix.arch }}.tar.gz
          else
            echo "Warning: dist directory not found"
            ls -la || true
          fi

      - name: Upload arch artifact (tar.gz)
        uses: actions/upload-artifact@v4
        with:
          name: driveanalyzer-${{ matrix.arch }}
          path: driveanalyzer-${{ matrix.arch }}.tar.gz

  make-universal:
    name: Create universal binary
    needs: build-matrix
    runs-on: macos-latest
    steps:
      - name: Download arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: driveanalyzer-arm64
          path: ./artifacts/arm64

      - name: Download x86_64 artifact
        uses: actions/download-artifact@v4
        with:
          name: driveanalyzer-x86_64
          path: ./artifacts/x86_64
        continue-on-error: true

      - name: Prepare files (extract and locate binaries)
        run: |
          set -eux
          echo "Listing downloaded artifact roots..."
          ls -la ./artifacts || true
          echo "artifacts/arm64 content:"
          ls -la ./artifacts/arm64 || true
          echo "artifacts/x86_64 content:"
          ls -la ./artifacts/x86_64 || true

          # If the downloaded artifact is a tar.gz, extract it in place
          for d in ./artifacts/arm64 ./artifacts/x86_64; do
            if compgen -G "$d/*.tar.gz" > /dev/null; then
              echo "Extracting archives in $d"
              mkdir -p "$d"/extracted
              for a in "$d"/*.tar.gz; do
                echo "Extract $a"
                tar -C "$d"/extracted -xzf "$a"
              done
            fi
          done

          echo "artifacts/arm64/extracted content:"
          ls -la ./artifacts/arm64/extracted || true
          echo "artifacts/x86_64/extracted content:"
          ls -la ./artifacts/x86_64/extracted || true

          # Try to find the binary at common locations: extracted/dist, extracted/, dist/, or root
          ARM_BIN=$(ls ./artifacts/arm64/extracted/dist/* ./artifacts/arm64/extracted/* ./artifacts/arm64/dist/* ./artifacts/arm64/* 2>/dev/null | grep -v '\.DS_Store' | head -n1 || true)
          X86_BIN=$(ls ./artifacts/x86_64/extracted/dist/* ./artifacts/x86_64/extracted/* ./artifacts/x86_64/dist/* ./artifacts/x86_64/* 2>/dev/null | grep -v '\.DS_Store' | head -n1 || true)

          echo "Resolved ARM_BIN=${ARM_BIN}"
          echo "Resolved X86_BIN=${X86_BIN}"

          mkdir -p out
          if [ -n "$ARM_BIN" ] && [ -f "$ARM_BIN" ]; then
            cp "$ARM_BIN" out/TEST-arm64
            ls -la out/TEST-arm64
          else
            echo "ARM binary not found" >&2
          fi

          if [ -n "$X86_BIN" ] && [ -f "$X86_BIN" ]; then
            cp "$X86_BIN" out/TEST-x86_64
            ls -la out/TEST-x86_64
          else
            echo "X86 binary not found" >&2
          fi

      - name: Create universal with lipo (if both present)
        run: |
          set -eux
          ls -la out || true
          echo "-- debug: binary info --"
          if [ -f out/TEST-arm64 ]; then
            echo "TEST-arm64 file:"; file out/TEST-arm64 || true
            echo "TEST-arm64 size:"; ls -lh out/TEST-arm64 || true
            echo "TEST-arm64 head:"; head -c 64 out/TEST-arm64 | xxd || true
          else
            echo "TEST-arm64 not present"
          fi
          if [ -f out/TEST-x86_64 ]; then
            echo "TEST-x86_64 file:"; file out/TEST-x86_64 || true
            echo "TEST-x86_64 size:"; ls -lh out/TEST-x86_64 || true
            echo "TEST-x86_64 head:"; head -c 64 out/TEST-x86_64 | xxd || true
          else
            echo "TEST-x86_64 not present"
          fi
          if [ -f out/TEST-arm64 ] && [ -f out/TEST-x86_64 ]; then
            lipo -create out/TEST-x86_64 out/TEST-arm64 -output out/TEST-universal
            chmod +x out/TEST-universal
            echo "Created universal binary out/TEST-universal"
          elif [ -f out/TEST-arm64 ]; then
            cp out/TEST-arm64 out/TEST-universal
            chmod +x out/TEST-universal
            echo "Only arm64 available; using arm64 binary"
          elif [ -f out/TEST-x86_64 ]; then
            cp out/TEST-x86_64 out/TEST-universal
            chmod +x out/TEST-universal
            echo "Only x86_64 available; using x86_64 binary"
          else
            echo "No built binary found" >&2
            exit 1
          fi

      - name: Package universal artifact (tar.gz)
        run: |
          set -eux
          echo "Files before packaging:"
          ls -la out || true
          mkdir -p out/dist
          if [ -f out/TEST-universal ]; then
            cp out/TEST-universal out/dist/TEST
          fi
          if [ ! -f out/dist/TEST ]; then
            echo "ERROR: packaged binary out/dist/TEST not found" >&2
            ls -la out/dist || true
            exit 2
          fi
          tar -C out/dist -czf driveanalyzer-macos-universal.tar.gz .
          ls -la driveanalyzer-macos-universal.tar.gz

      - name: Upload universal artifact
        uses: actions/upload-artifact@v4
        with:
          name: DriveAnalyzer-macos-universal
          path: driveanalyzer-macos-universal.tar.gz

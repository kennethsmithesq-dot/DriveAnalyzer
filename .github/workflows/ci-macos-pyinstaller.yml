name: macOS PyInstaller Build (x86_64 + arm64)

on:
  pull_request:
    branches: [ main, add/macos-ci-from-main ]
  workflow_dispatch:

jobs:
  build-x86_64:
    name: Build (x86_64)
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download and install python.org universal2 Python 3.11
        run: |
          set -eux
          curl -LO https://www.python.org/ftp/python/3.11.8/python-3.11.8-macos11.pkg
          sudo installer -pkg python-3.11.8-macos11.pkg -target /
          echo "/usr/local/bin" >> $GITHUB_PATH
          python3 --version
          which python3
          python3 -c "import sys; print(sys.executable)"

      - name: Install build deps
        run: |
          set -eux
          rm -rf .venv_x86_64
          arch -x86_64 /usr/local/bin/python3 -m venv .venv_x86_64
          source .venv_x86_64/bin/activate
          arch -x86_64 pip install --upgrade pip
          arch -x86_64 pip install numpy matplotlib
          arch -x86_64 pip install --upgrade pyinstaller
          if [ -f requirements.txt ]; then
            arch -x86_64 pip install -r requirements.txt
          else
            arch -x86_64 pip install reportlab music21 pillow mido pygame
          fi
          arch -x86_64 python3 -c "import sys,platform; print(sys.executable); print(platform.machine())" > build-env.txt || true
          rm -rf build dist *.spec || true
          arch -x86_64 pip freeze > installed-packages.txt || true
          ls -la > ls-root.txt || true

      - name: Copy DejaVu fonts to assets/fonts
        run: |
          set -eux
          source .venv_x86_64/bin/activate
          FONT_SRC=$(arch -x86_64 python3 -c "import matplotlib; import os; print(os.path.join(matplotlib.get_data_path(), 'fonts', 'ttf'))")
          mkdir -p assets/fonts
          cp -v $FONT_SRC/DejaVu*.ttf assets/fonts/ || true
          ls -la assets/fonts || true

      - name: Build with PyInstaller (x86_64 app bundle)
        run: |
          set -eux
          source .venv_x86_64/bin/activate
          echo "== PYINSTALLER: APP BUNDLE BUILD ==" > build-app.log
          arch -x86_64 python3 -m PyInstaller --noconfirm --clean --windowed --name DriveAnalyzer TEST.py \
            --add-data assets/title.png:. \
            --add-data assets/ico.png:. \
            --add-data assets/flat.png:. \
            --add-data assets/sharp.png:. \
            --add-data assets/fonts:assets/fonts \
            --hidden-import=mido --hidden-import=mido.backends.rtmidi --collect-all mido --icon assets/myicon.icns >> build-app.log 2>&1 || true
          if [ -d dist/DriveAnalyzer.app ]; then
            chmod -R a+rX dist/DriveAnalyzer.app || true
          fi
          cp build-app.log build-app-x86_64.log || true

      - name: Package artifact (zip .app)
        run: |
          set -eux
          if [ -d dist/DriveAnalyzer.app ]; then
            ditto -c -k --sequesterRsrc --keepParent dist/DriveAnalyzer.app driveanalyzer-x86_64.app.zip
            ls -la driveanalyzer-x86_64.app.zip
          else
            echo "Warning: .app bundle not found"
            ls -la dist || true
          fi

      - name: Upload artifact (.app zip)
        uses: actions/upload-artifact@v4
        with:
          name: driveanalyzer-x86_64-app
          path: driveanalyzer-x86_64.app.zip

      - name: Upload build logs and diagnostics
        uses: actions/upload-artifact@v4
        with:
          name: driveanalyzer-x86_64-logs
          path: |
            build-app-x86_64.log
            build-env.txt
            ls-root.txt

  build-arm64:
    name: Build (arm64)
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure runner is Apple Silicon (arm64)
        run: |
          set -eux
          uname -m
          python3 -c "import platform; print(platform.machine())"
          if [ "$(uname -m)" != "arm64" ]; then
            echo "This job requires an Apple Silicon (arm64) runner. Failing to avoid accidental x86 execution."
            exit 1
          fi

      - name: Download and install python.org universal2 Python 3.11
        run: |
          set -eux
          curl -LO https://www.python.org/ftp/python/3.11.8/python-3.11.8-macos11.pkg
          sudo installer -pkg python-3.11.8-macos11.pkg -target /
          echo "/usr/local/bin" >> $GITHUB_PATH
          python3 --version
          which python3
          python3 -c "import sys; print(sys.executable)"

      - name: Install build deps (arm64/native)
        run: |
          set -eux
          rm -rf .venv_arm64
          /usr/local/bin/python3 -m venv .venv_arm64
          source .venv_arm64/bin/activate
          pip install --upgrade pip
          pip install numpy matplotlib
          pip install --upgrade pyinstaller
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install reportlab music21 pillow mido pygame
          fi
          python3 -c "import sys,platform; print(sys.executable); print(platform.machine())" > build-env-arm64.txt || true
          rm -rf build dist *.spec || true
          pip freeze > installed-packages-arm64.txt || true
          ls -la > ls-root-arm64.txt || true

      - name: Copy DejaVu fonts to assets/fonts
        run: |
          set -eux
          source .venv_arm64/bin/activate
          FONT_SRC=$(python3 -c "import matplotlib; import os; print(os.path.join(matplotlib.get_data_path(), 'fonts', 'ttf'))")
          mkdir -p assets/fonts
          cp -v $FONT_SRC/DejaVu*.ttf assets/fonts/ || true
          ls -la assets/fonts || true

      - name: Build with PyInstaller (arm64 app bundle)
        run: |
          set -eux
          source .venv_arm64/bin/activate
          echo "== PYINSTALLER: ARM64 APP BUNDLE BUILD ==" > build-app-arm64.log
          python3 -m PyInstaller --noconfirm --clean --windowed --name DriveAnalyzer TEST.py \
            --add-data assets/title.png:. \
            --add-data assets/ico.png:. \
            --add-data assets/flat.png:. \
            --add-data assets/sharp.png:. \
            --add-data assets/fonts:assets/fonts \
            --hidden-import=mido --hidden-import=mido.backends.rtmidi --collect-all mido --icon assets/myicon.icns >> build-app-arm64.log 2>&1 || true
          if [ -d dist/DriveAnalyzer.app ]; then
            chmod -R a+rX dist/DriveAnalyzer.app || true
          fi
          cp build-app-arm64.log build-app-arm64.log || true

      - name: Package artifact (zip .app)
        run: |
          set -eux
          if [ -d dist/DriveAnalyzer.app ]; then
            ditto -c -k --sequesterRsrc --keepParent dist/DriveAnalyzer.app driveanalyzer-arm64.app.zip
            ls -la driveanalyzer-arm64.app.zip
          else
            echo "Warning: .app bundle not found"
            ls -la dist || true
          fi

      - name: Upload artifact (.app zip)
        uses: actions/upload-artifact@v4
        with:
          name: driveanalyzer-arm64-app
          path: driveanalyzer-arm64.app.zip

      - name: Upload build logs and diagnostics (arm64)
        uses: actions/upload-artifact@v4
        with:
          name: driveanalyzer-arm64-logs
          path: |
            build-app-arm64.log
            build-env-arm64.txt
            ls-root-arm64.txt

  build-universal:
    name: Build Universal App
    runs-on: macos-latest
    needs: [build-x86_64, build-arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download x86_64 artifact
        uses: actions/download-artifact@v4
        with:
          name: driveanalyzer-x86_64-app
          path: x86_download

      - name: Download arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: driveanalyzer-arm64-app
          path: arm64_download

      - name: Unzip artifacts
        run: |
          set -eux
          # Create separate directories for each architecture
          mkdir -p x86_app arm64_app
          
          # Unzip x86_64 artifact
          cd x86_download
          ditto -x -k driveanalyzer-x86_64.app.zip ../x86_app/
          cd ..
          
          # Unzip arm64 artifact  
          cd arm64_download
          ditto -x -k driveanalyzer-arm64.app.zip ../arm64_app/
          cd ..
          
          # Verify the unzipped structure
          echo "=== x86_64 app structure ==="
          ls -la x86_app/
          echo "=== arm64 app structure ==="
          ls -la arm64_app/

      - name: Locate and merge executables
        run: |
          set -eux
          
          # Find the executable name dynamically
          X86_MACOS_DIR="x86_app/DriveAnalyzer.app/Contents/MacOS"
          ARM64_MACOS_DIR="arm64_app/DriveAnalyzer.app/Contents/MacOS"
          
          if [ ! -d "$X86_MACOS_DIR" ]; then
            echo "Error: x86_64 MacOS directory not found at $X86_MACOS_DIR"
            exit 1
          fi
          
          if [ ! -d "$ARM64_MACOS_DIR" ]; then
            echo "Error: arm64 MacOS directory not found at $ARM64_MACOS_DIR"
            exit 1
          fi
          
          # List executables in both directories
          echo "=== x86_64 MacOS contents ==="
          ls -la "$X86_MACOS_DIR"
          echo "=== arm64 MacOS contents ==="
          ls -la "$ARM64_MACOS_DIR"
          
          # Try to get the executable name from the Info.plist first
          EXEC_NAME=""
          INFO_PLIST="x86_app/DriveAnalyzer.app/Contents/Info.plist"
          if [ -f "$INFO_PLIST" ]; then
            # Use plutil to extract the executable name from Info.plist (more reliable than defaults read)
            EXEC_NAME=$(plutil -extract CFBundleExecutable raw "$INFO_PLIST" 2>/dev/null || true)
            if [ -n "$EXEC_NAME" ]; then
              echo "Executable name from Info.plist: $EXEC_NAME"
            fi
          fi
          
          # If that fails, find the first executable file in the MacOS directory
          if [ -z "$EXEC_NAME" ]; then
            echo "Falling back to directory listing to find executable"
            # Use modern find syntax for executable files
            X86_EXEC=$(find "$X86_MACOS_DIR" -type f -perm /111 | head -1)
            if [ -z "$X86_EXEC" ]; then
              # Final fallback: just get the first file 
              X86_EXEC=$(find "$X86_MACOS_DIR" -type f | head -1)
            fi
            
            if [ -z "$X86_EXEC" ]; then
              echo "Error: No executable found in x86_64 app"
              exit 1
            fi
            
            EXEC_NAME=$(basename "$X86_EXEC")
          fi
          echo "Detected executable name: $EXEC_NAME"
          
          # Set paths for both architecture executables
          X86_BIN="$X86_MACOS_DIR/$EXEC_NAME"
          ARM64_BIN="$ARM64_MACOS_DIR/$EXEC_NAME"
          
          # Verify both executables exist
          if [ ! -f "$X86_BIN" ]; then
            echo "Error: x86_64 executable not found at $X86_BIN"
            exit 1
          fi
          
          if [ ! -f "$ARM64_BIN" ]; then
            echo "Error: arm64 executable not found at $ARM64_BIN"
            exit 1
          fi
          
          # Check the architectures of the binaries
          echo "=== x86_64 binary info ==="
          file "$X86_BIN"
          lipo -info "$X86_BIN" || true
          
          echo "=== arm64 binary info ==="
          file "$ARM64_BIN"
          lipo -info "$ARM64_BIN" || true
          
          # Create universal binary using lipo
          UNIVERSAL_BIN="universal_$EXEC_NAME"
          echo "Creating universal binary: $UNIVERSAL_BIN"
          lipo -create "$X86_BIN" "$ARM64_BIN" -output "$UNIVERSAL_BIN"
          
          # Verify the universal binary
          echo "=== Universal binary info ==="
          file "$UNIVERSAL_BIN"
          lipo -info "$UNIVERSAL_BIN"
          
          # Replace the executable in the arm64 app with the universal binary
          # (we'll use the arm64 app as the base for the universal app)
          echo "Replacing executable in arm64 app with universal binary"
          cp "$UNIVERSAL_BIN" "$ARM64_BIN"
          chmod +x "$ARM64_BIN"
          
          # Verify the replacement worked
          echo "=== Verification: Universal binary in app ==="
          lipo -info "$ARM64_BIN"

      - name: Package universal app
        run: |
          set -eux
          
          # Create the universal app zip using the same method as the architecture-specific builds
          cd arm64_app
          ditto -c -k --sequesterRsrc --keepParent DriveAnalyzer.app ../driveanalyzer-universal.app.zip
          cd ..
          
          # Verify the final artifact
          ls -la driveanalyzer-universal.app.zip
          
          # Test that we can extract and verify the universal binary
          mkdir -p verify_universal
          cd verify_universal
          ditto -x -k ../driveanalyzer-universal.app.zip .
          
          # Verify the app structure
          echo "=== Universal app structure ==="
          ls -la DriveAnalyzer.app/Contents/
          
          # Find and verify the executable
          UNIVERSAL_EXEC=$(find DriveAnalyzer.app/Contents/MacOS -type f | head -1)
          if [ -n "$UNIVERSAL_EXEC" ]; then
            echo "=== Final verification: Universal app executable ==="
            file "$UNIVERSAL_EXEC"
            lipo -info "$UNIVERSAL_EXEC"
            
            # Verify the Info.plist is still valid
            INFO_PLIST="DriveAnalyzer.app/Contents/Info.plist"
            if [ -f "$INFO_PLIST" ]; then
              echo "=== Info.plist verification ==="
              plutil -extract CFBundleExecutable raw "$INFO_PLIST" 2>/dev/null || true
              plutil -lint "$INFO_PLIST" || true
            fi
          fi

      - name: Upload universal artifact
        uses: actions/upload-artifact@v4
        with:
          name: driveanalyzer-universal-app
          path: driveanalyzer-universal.app.zip